{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/MyMessage.jsx","components/OtherMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","OtherMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","title","keys","Object","map","key","index","lastMessageKey","isMyMessage","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b35428e3.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = { 'Project-ID': \"c9518d9a-b207-40a5-9f1e-c17c3e7856ae\", 'User-Name': username, 'User-Secret': password }\r\n\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject });       \r\n\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n        } catch (error) {\r\n            setError('Incorrect username or password. Please try again.');\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\"> \r\n                <h1 className=\"title\">SAD Chat</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n                    <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoginForm;","import { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons'\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();  {/* default is to refresh browser */}\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n        setValue('');\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n    }\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{ display: 'none' }}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\"/>\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({ message }) => {\r\n    if(message?.attachments?.length > 0) {\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '10px', color: 'white', backgroundColor: '#9673DE' }}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","const OtherMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    \r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                \r\n                />\r\n            )}\r\n            { message?.attachments?.length > 0 \r\n                ? (\r\n                    <img\r\n                        src={message.attachments[0].file}\r\n                        alt=\"message-attachment\"\r\n                        className=\"message-image\"\r\n                        style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n                    />\r\n                ) : (\r\n                    <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n                        {message.text}\r\n                    </div>\r\n                )\r\n                \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherMessage;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport OtherMessage from './OtherMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <OtherMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n\r\n    if(!chat) return 'Loading...';\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} /> \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\n\r\nimport LoginForm from './components/LoginForm';\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\nimport './Chat.css';\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />;\r\n\r\n    return  (\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"c9518d9a-b207-40a5-9f1e-c17c3e7856ae\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed { ...chatAppProps } />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n//ReactDOM.render(e(chat_container), document.querySelector('chat_container'));"],"sourceRoot":""}